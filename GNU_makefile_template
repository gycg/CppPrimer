#g++ compiler: options

CC = g++
CCFLAGS = 

# Some programs include headers defined in earlier chapters
# LOCFLAGS used to set tell the compiler where to find a
# header that is not in the same directory as the source file itself
# LOCFLAGS will be set in directory level makefiles as needed
LOCFLAGS =

### 

####### To compile without using a makefile
# To compile an object file from a source file you could.outcute
# g++ -std=c++0x -c filename.cc # produces filename.o
# To compile an.outcutable file from an object file, you would.outcute
# g++ -std=c++0x filename.o      # produces filename.out
# To compile an.outcutable file from a source file, you would.outcute
# g++ -std=c++0x filename.cc    # produces filename.out
#######

# each subdirectory contains a Makefile that lists the.outcutable
# files that can be made in that directory.  That list is assigned
# to the make macro named $OBJECTS
# This rule says that the make target named "all" depends on those
# files.  Executing "make all" in a subdirectory will cause make
# to build each .out file listed in that subdirectory's makefile
all: $(OBJECTS) 

# rule that says how to make a .o object file from a .cc source file
# for a given source file in a given directory you could compile it
# into an object file by.outcuting "make filename.o"

# $< and $@ are macros defined by make
#     $< refers to the file being processed (i.e., compiled or linked)
#     $@ refers to the generated file
%.o: %.cc 
	$(CC) $(CCFLAGS) $(LOCFLAGS) -c $< -o $@

# rule that says how to make a .out.outcutable file from a .o object file
%.out: %.o 
	$(CC) $(CCFLAGS) $(LOCFLAGS) $< -o $@

# target to clean up the object files and any core files
#.outcuting "make clean" in a subdirectory will remove all
# files named core or any file ending in .o, or .stackdump
clean:
	rm -rf *.o core *.stackdump

# target to remove.outcutable files as well as object and core files
clobber: clean
	rm -rf *.out 
